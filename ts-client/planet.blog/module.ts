// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgSendUpdatePost } from "./types/planet/blog/tx";
import { MsgSendIbcPost } from "./types/planet/blog/tx";
import { MsgCreateSentPost } from "./types/planet/blog/tx";
import { MsgUpdateSentPost } from "./types/planet/blog/tx";
import { MsgDeleteSentPost } from "./types/planet/blog/tx";


export { MsgSendUpdatePost, MsgSendIbcPost, MsgCreateSentPost, MsgUpdateSentPost, MsgDeleteSentPost };

type sendMsgSendUpdatePostParams = {
  value: MsgSendUpdatePost,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendIbcPostParams = {
  value: MsgSendIbcPost,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateSentPostParams = {
  value: MsgCreateSentPost,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateSentPostParams = {
  value: MsgUpdateSentPost,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteSentPostParams = {
  value: MsgDeleteSentPost,
  fee?: StdFee,
  memo?: string
};


type msgSendUpdatePostParams = {
  value: MsgSendUpdatePost,
};

type msgSendIbcPostParams = {
  value: MsgSendIbcPost,
};

type msgCreateSentPostParams = {
  value: MsgCreateSentPost,
};

type msgUpdateSentPostParams = {
  value: MsgUpdateSentPost,
};

type msgDeleteSentPostParams = {
  value: MsgDeleteSentPost,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgSendUpdatePost({ value, fee, memo }: sendMsgSendUpdatePostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendUpdatePost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendUpdatePost({ value: MsgSendUpdatePost.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendUpdatePost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendIbcPost({ value, fee, memo }: sendMsgSendIbcPostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendIbcPost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendIbcPost({ value: MsgSendIbcPost.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendIbcPost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateSentPost({ value, fee, memo }: sendMsgCreateSentPostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateSentPost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateSentPost({ value: MsgCreateSentPost.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateSentPost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateSentPost({ value, fee, memo }: sendMsgUpdateSentPostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateSentPost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateSentPost({ value: MsgUpdateSentPost.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateSentPost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteSentPost({ value, fee, memo }: sendMsgDeleteSentPostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteSentPost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteSentPost({ value: MsgDeleteSentPost.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteSentPost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgSendUpdatePost({ value }: msgSendUpdatePostParams): EncodeObject {
			try {
				return { typeUrl: "/planet.blog.MsgSendUpdatePost", value: MsgSendUpdatePost.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendUpdatePost: Could not create message: ' + e.message)
			}
		},
		
		msgSendIbcPost({ value }: msgSendIbcPostParams): EncodeObject {
			try {
				return { typeUrl: "/planet.blog.MsgSendIbcPost", value: MsgSendIbcPost.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendIbcPost: Could not create message: ' + e.message)
			}
		},
		
		msgCreateSentPost({ value }: msgCreateSentPostParams): EncodeObject {
			try {
				return { typeUrl: "/planet.blog.MsgCreateSentPost", value: MsgCreateSentPost.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateSentPost: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateSentPost({ value }: msgUpdateSentPostParams): EncodeObject {
			try {
				return { typeUrl: "/planet.blog.MsgUpdateSentPost", value: MsgUpdateSentPost.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateSentPost: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteSentPost({ value }: msgDeleteSentPostParams): EncodeObject {
			try {
				return { typeUrl: "/planet.blog.MsgDeleteSentPost", value: MsgDeleteSentPost.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteSentPost: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			PlanetBlog: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;